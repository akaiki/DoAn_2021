#pragma checksum "C:\Users\Akaiki\source\repos\KnowledgeSearching\KnowledgeSearching\Views\Main\II_5.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "494c51a43eb243cfa9eb34156a03a1d491c9213f"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Main_II_5), @"mvc.1.0.view", @"/Views/Main/II_5.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Akaiki\source\repos\KnowledgeSearching\KnowledgeSearching\Views\_ViewImports.cshtml"
using KnowledgeSearching;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Akaiki\source\repos\KnowledgeSearching\KnowledgeSearching\Views\_ViewImports.cshtml"
using KnowledgeSearching.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"494c51a43eb243cfa9eb34156a03a1d491c9213f", @"/Views/Main/II_5.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"55c93d07d287d648d202a547ac41ea2a162bac7c", @"/Views/_ViewImports.cshtml")]
    public class Views_Main_II_5 : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "C:\Users\Akaiki\source\repos\KnowledgeSearching\KnowledgeSearching\Views\Main\II_5.cshtml"
  
    ViewData["Title"] = "Ví dụ cách tính độ phức tạp của thuật toán";
    Layout = "~/Views/Main/Menu.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<div class=""container"">
    <h2>Các ví dụ cách tính độ phức tạp của thuật toán</h2>
    <hr />
    <p>
        Dựa trên <a href=""II_4""><b>các quy tắc để xác định độ phức tạp của giải thuật</b></a>, ta có thể xác định được độ phức tạp của thuật toán theo các bước:
    </p>
    <div class=""card"" style=""background-color: #cccccc"">
        <ul class=""card-body"">
            <li><b>B1: </b>Gọi T là độ phức tạp của thuật toán cần tìm</li>
            <li><b>B2: </b>Tính biểu thức T bằng cách cộng thời gian thực thi của các câu lệnh trong thuật toán</li>
            <li><b>B3: </b>Xét số hạng có tốc độ tăng nhanh nhất khi n tiến đến +∞</li>
            <li><b>B4: </b>Lược bỏ các giá trị có thể lược bỏ được theo các <a href=""II_4""><b>các quy tắc</b></a></li>
            <li><b>B5: </b>Giá trị số hạng cuối cùng còn sót lại chính là độ phức tạp của thuật toán cần tìm</li>
        </ul>
    </div>
    <hr />
    <h3>Ví dụ 1:</h3>
    <p>
        Lấy ví dụ về giải thuật <a href=""III_1_4_5""><b>sắp xếp ");
            WriteLiteral(@"nổi bọt </b></a> như sau:
    </p>
    <div class=""card"" style=""background-color: #cccccc"">
<pre style=""padding: 1em; margin: .5em 0; overflow: auto;"" class=""card-body"">
<code>void BubbleSort(int a[], int n){
    for (int i = 0; i < n - 1; i++){ // ---> O(n)
        for (int j = n - 1; j > i; j--){ // ---> O(n)
            if(a[j] < a[j-1]){   // ---> O(1)
                int temp = a[j]; // ---> O(1)
                a[j] = a[j-1];   // ---> O(1)
                a[j-1] = temp;   // ---> O(1)
            }
        }
    }
}</code> </pre>
    </div>
    <p>
        Ở phần trong khối lệnh <code>if</code>, ta thấy tất cả đều có độ phức tạp là O(1), do đó ta có thể coi khối lệnh so sánh là O(1). Tiếp đến, mối khối lệnh <code>for</code> có độ phức tạp là O(n) và do chúng lồng nhau nên theo <a href=""II_4_3""><b>quy tắc nhân</b></a>, hai vòng lặp for lồng nhau sẽ có độ phức tạp là O(n²).
    </p>

    <hr />
    <h3>Ví dụ 2:</h3>
    <p>Thuật toán tính tổng các số từ 1 đến n:</p>
    <div class=");
            WriteLiteral(@"""card"" style=""background-color: #cccccc"">
<pre style=""padding: 1em; margin: .5em 0; overflow: auto;"" class=""card-body"">
<code>s=0;
for (i= 1;i<=n;i++)
    s=s+i;
</code> </pre>
    </div>
    <p>
        Vòng lặp lặp n lần phép gán <code>s=s+i</code>, nên thời gian tính toán tỉ lệ thuật với n, tức là độ phức tạp là O(n).
    </p>

    <hr />
    <h3>Ví dụ 3:</h3>
    <p>
        Đoạn chương trình sau:
    </p>
    <div class=""card"" style=""background-color: #cccccc"">
<pre style=""padding: 1em; margin: .5em 0; overflow: auto;"" class=""card-body"">
<code>for(i = 1; i < n; i++){");
            BeginWriteAttribute("for(j", "\r\n    for(j =", 2766, "", 2779, 0);
            EndWriteAttribute();
            WriteLiteral(@" 1; j <= m; j++){
        for (k = 1; k <= x; k++){
            //lệnh
        }
        for (h = 1; h <= y; h++){
            //lệnh
        }
    }
}
</code> </pre>
    </div>
    <p>
        Ta nhận thấy lệnh <code>for (k ...</code> và <code>for (h...</code> là 2 khối lệnh liền kề nhau nên ta áp dụng <a href=""II_4_2""><b>quy tắc cộng - max</b></a>, ta tính được độ phức tạp của 2 khối đó là O(max(x,y)).
        Do ta gom lại cả 2 khối lệnh <code>for (k...</code> và <code>for (h...</code> lại làm một khối lớn với độ phức tạp là O(max(x, y)), nên bài toán đưa về 3 khối lệnh lồng nhau, theo <a href=""II_4_3""><b>quy tắc nhân</b></a>, ta tính được độ phức tạp của cả dòng lệnh trên là <b>O(n*m*max(x, y))</b>

    </p>
    <hr />
    <p>
        Bạn có thể tham khảo các mục sau:
    </p>
    <ul>
        <li><a href=""II""><b>Độ phức tạp của thuật toán</b></a></li>
        <li><a href=""I_3_2""><b>Big Oh Notation, &Omicron; trong Cấu trúc dữ liệu và giải thuật</b></a></li>
        <li><a href=""I_3");
            WriteLiteral("_5\"><b>Ví dụ độ phức tạp trong cấu trúc dữ liệu và giải thuật</b></a></li>\r\n        <li><a href=\"II_4\"><b>Các quy tắc để xác định độ phức tạp của giải thuật</b></a></li>\r\n    </ul>\r\n</div>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
