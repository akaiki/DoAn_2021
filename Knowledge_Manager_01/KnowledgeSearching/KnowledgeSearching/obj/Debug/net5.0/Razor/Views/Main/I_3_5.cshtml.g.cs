#pragma checksum "D:\DoAn_2021\Knowledge_Manager_01\KnowledgeSearching\KnowledgeSearching\Views\Main\I_3_5.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "dbc4bd69de5a9ac0b04af11deb7918325398dbc6"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Main_I_3_5), @"mvc.1.0.view", @"/Views/Main/I_3_5.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\DoAn_2021\Knowledge_Manager_01\KnowledgeSearching\KnowledgeSearching\Views\_ViewImports.cshtml"
using KnowledgeSearching;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\DoAn_2021\Knowledge_Manager_01\KnowledgeSearching\KnowledgeSearching\Views\_ViewImports.cshtml"
using KnowledgeSearching.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"dbc4bd69de5a9ac0b04af11deb7918325398dbc6", @"/Views/Main/I_3_5.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"55c93d07d287d648d202a547ac41ea2a162bac7c", @"/Views/_ViewImports.cshtml")]
    public class Views_Main_I_3_5 : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/Image/BigOComplexity.jpg"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("alt", new global::Microsoft.AspNetCore.Html.HtmlString("Big O Notation"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("style", new global::Microsoft.AspNetCore.Html.HtmlString("display: block; margin-left: auto; margin-right: auto;"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "D:\DoAn_2021\Knowledge_Manager_01\KnowledgeSearching\KnowledgeSearching\Views\Main\I_3_5.cshtml"
  
    ViewData["Title"] = "I_3_5";
    Layout = "~/Views/Main/Menu.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"

<div class=""container"">
    <h2>Ví dụ phân tích tiệm cận về độ phức tạp trong cấu trúc dữ liệu và giải thuật</h2>

    <p>
        Để hiểu thêm về phân tích tiệm cận trong cấu trúc dữ liệu và giả thuật, chúng ta hãy xem ví dụ về <a href=""II""><b>Độ phức tạp của thuật toán</b></a> dựa trên thang đo Big &Omicron;.
    </p>

    <p>
        Ví dụ một số độ phức tạp thường gặp:
    </p>

    <ul>
        <li>
            <p>
                <b>&Omicron;(n): </b> Độ phức tạp tuyến tính. Ví dụ xét hàm tình tổng các số từ 1 đến n sau:
            </p>
            <div class=""card"" style=""background-color: #cccccc"">
                <pre class=""card-body"" style="" padding: 1em; margin: .5em 0; overflow: auto;""><code>int sum(int n) {
    int s = 0;
    for(int i = 1; i &lt;= n; i++)
        s += i;
    return s;
}</code></pre>
            </div>
            <p>
                Với mỗi giá trị khác nhau của n thì số lần thực thi của vòng lặp trên là n lần. Chính vì vậy thời gian thực thi của c");
            WriteLiteral(@"hương trình trên phụ thuộc vào giá trị đầu vào n. Ta nói độ phức tạp của chương trình trên là <b>&Omicron;(n)</b>.
            </p>
        </li>
        <li>
            <p>
                <b> &Omicron;(1): </b> Độ phức tạp hằng số. Cũng là ví dụ tính tổng các số từ 1 đến n, xét đoạn chương trình sau:
            </p>
            <div class=""card"" style=""background-color: #cccccc"">
                <pre style=""padding: 1em; margin: .5em 0; overflow: auto;"" class=""card-body""><code> int sum(int n){ 
    return n*(n+1)/2;
}</code></pre>
            </div>
            <p>
                Không giống như hàm tính tổng ở trên, với đoạn chương trình này với mọi giá trị đầu vào chương trình chỉ thực thi đúng 1 câu lệnh return. Do đó, ta nói độ phức tạp của chương trình trên là <b>&Omicron;(1)</b>.
            </p>
        </li>
        <li>
            <p>
                <b> &Omicron;(n²): </b> Thường gặp khi có 2 vòng lặp lồng nhau, ví dụ thuật toán <a");
            BeginWriteAttribute("href", " href=\"", 2088, "\"", 2095, 0);
            EndWriteAttribute();
            WriteLiteral(@"><b>sắp xếp nổi bọt</b></a>;
            </p>
            <div class=""card"" style=""background-color: #cccccc"">
                <pre style=""padding: 1em; margin: .5em 0; overflow: auto;"" class=""card-body"">
                <code>void BubbleSort(int a[], int n){
    for (int i = 0; i < n - 1; i++){
        for (int");
            BeginWriteAttribute("j", " j =", 2415, "", 2419, 0);
            EndWriteAttribute();
            WriteLiteral(" n - 1; j > i; j--){\r\n            if(a[j] < a[j-1]){\r\n                int");
            BeginWriteAttribute("temp", " temp =", 2492, "", 2499, 0);
            EndWriteAttribute();
            WriteLiteral(" a[j];");
            BeginWriteAttribute("a[j]", "\r\n                a[j] =", 2505, "", 2529, 0);
            EndWriteAttribute();
            WriteLiteral(" a[j-1];");
            BeginWriteAttribute("a[j-1]", "\r\n                a[j-1] =", 2537, "", 2563, 0);
            EndWriteAttribute();
            WriteLiteral(" temp;\r\n            }\r\n        }\r\n    }\r\n}</code> </pre>\r\n            </div>\r\n        </li>\r\n        <li>\r\n            <p>\r\n                <b> &Omicron;(logn): </b> Ví dụ thuật toán <a");
            BeginWriteAttribute("href", " href=\"", 2748, "\"", 2755, 0);
            EndWriteAttribute();
            WriteLiteral(@"><b>tìm kiếm nhị phân</b></a>;
            </p>
            <div class=""card"" style=""background-color: #cccccc"">
                <pre style=""padding: 1em; margin: .5em 0; overflow: auto;"" class=""card-body""><code>int binarySearch(int *arr, int n, int x) {
    int r = n - 1;
    int l = 0;
    int mid = l + r) / 2;
    if (arr[mid] == x)
        return mid;
    if (arr[mid] > x)
        r = mid - 1;
    if (arr[mid] < x)");
            BeginWriteAttribute("l", "\r\n        l =", 3189, "", 3202, 0);
            EndWriteAttribute();
            WriteLiteral(" mid + 1;\r\n    }\r\n    return -1;\r\n}</code></pre>\r\n            </div>\r\n        </li>\r\n    </ul>\r\n\r\n    <p>Dưới đây là biểu đồ thể hiện độ phức tạp của thuật toán dựa theo <a href=\"I_3_2\"><b>Big &Omicron;</b></a></p> :\r\n\r\n    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "dbc4bd69de5a9ac0b04af11deb7918325398dbc68934", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"

    <hr />
    <p>
        Bạn có thể tham khảo các mục sau:
    </p>
    <ul>
        <li><a href=""I_3""><b>Phân tích tiệm cận trong cấu trúc dữ liệu và giải thuật</b></a></li>
        <li><a href=""I_3_2""><b>Big Oh Notation, &Omicron; trong Cấu trúc dữ liệu và giải thuật</b></a></li>
        <li><a href=""II""><b>Độ phức tạp của thuật toán</b></a></li>
        <li><a href=""II_5""><b>Ví dụ tính độ phức tạp của thuật toán</b></a></li>
    </ul>
</div>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
