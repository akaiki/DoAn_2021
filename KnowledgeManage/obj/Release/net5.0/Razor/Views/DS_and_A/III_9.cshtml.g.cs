#pragma checksum "C:\Users\Akaiki\source\repos\KnowledgeManage\KnowledgeManage\Views\DS_and_A\III_9.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "228d88d7828517c6a203410ebc6a892fb65a9ac3"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_DS_and_A_III_9), @"mvc.1.0.view", @"/Views/DS_and_A/III_9.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Akaiki\source\repos\KnowledgeManage\KnowledgeManage\Views\_ViewImports.cshtml"
using KnowledgeManage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Akaiki\source\repos\KnowledgeManage\KnowledgeManage\Views\_ViewImports.cshtml"
using KnowledgeManage.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"228d88d7828517c6a203410ebc6a892fb65a9ac3", @"/Views/DS_and_A/III_9.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d8b91396dfbb5c43e5379ee682f129446bb1c6c7", @"/Views/_ViewImports.cshtml")]
    public class Views_DS_and_A_III_9 : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "C:\Users\Akaiki\source\repos\KnowledgeManage\KnowledgeManage\Views\DS_and_A\III_9.cshtml"
  
    ViewData["Title"] = "III_9";
    Layout = "~/Views/DS_and_A/Menu.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<div id=""accordion"" style=""padding-left: 15%; padding-right: 15%; "">
    <h1>BÀI TẬP VỀ GIẢI THUẬT SẮP XẾP</h1>
    <p class=""alert-warning"">BẠN CÓ THỂ NHẤN VÀO ĐỂ XEM BÀI GIẢI</p>  
    <div id=""noibot"">
        <h3>Bài tập tìm kiếm áp dụng giải thuật sắp xếp nổi bọt (Bubble Sort)</h3>
        <div class=""card"">
            <div class=""card-header"">
                <a class=""card-link"" data-toggle=""collapse"" href=""#Bai1"">
                    Bài 1. Cho mảng a có n phần tử, a = [6, 7, 0, 2, 8, 1, 3, 9, 4, 5]. Sử dụng <b>giải thuật sắp xếp nổi bọt</b>, sắp xếp mảng theo thứ tự tăng dần.
                </a>
            </div>
            <div id=""Bai1"" class=""collapse container"" data-parent=""#accordion"">
                <br />
                <u><b>Ý tưởng bài toán</b></u>
                <p>Ta thực hiện các bước:</p>
                <ul>
                    <li><b>Bước 1: </b>Gán i = 0, là phần tử đầu tiên</li>
                    <li><b>Bước 2: </b>Lần lượt so sánh và đổi chỗ (nếu cần) từ ");
            WriteLiteral(@"phải sang trái đối với các phần tử từ a[n] đến a[i]. Với biến gán j = n-i. Lặp lại khi j > i.</li>
                    <li><b>Bước 3: </b>i = i + 1</li>
                    <li><b>Bước 4: </b>Nêu i < n, quay lại <b>bước 2</b>. Ngược lại, dừng, dãy đã cho đã sắp xếp đúng vị trí.</li>
                </ul>
                <hr />
                <u><b>Bài giải:</b></u>
<pre style=""overflow: auto; font-family:Consolas"" class=""card-body"">
<code>
#include  &lt;iostream&gt;   

using namespace std;

void Bubble_sort(int a[], int n)
{
    for (int i = 0; i< n; i++)
		for (int");
            BeginWriteAttribute("j", " j =", 1702, "", 1706, 0);
            EndWriteAttribute();
            WriteLiteral(@" 0; j < n - 1 ; j++)
			if (a[j] > a[j + 1]){
                int t = a[j];
                a[j] = a[j + 1];
                a[j + 1] = t;
			}
}
int main()
{
    int a[] = {6, 7, 0, 2, 8, 1, 3, 9, 4, 5};
    int n = sizeof(a)/sizeof(a[0]);
    
    cout << ""Truoc khi sap xep: "" << endl;
    for (int i=0; i < n; i++){
        cout << ""-"" << a[i];
    }
    cout << endl;
    Bubble_sort(a, n);
    
    cout << ""Sau khi sap xep: "" << endl;
    for (int i=0; i < n; i++){
        cout << ""-"" << a[i];
    }
    return 0;
}
</code> 
</pre>
            </div>
        </div>
        <div class=""card"">
            <div class=""card-header"">
                <a class=""card-link"" data-toggle=""collapse"" href=""#Bai2"">
                    Bài 2. Cho mảng a có n phần tử, a = [6, 7, 0, 2, 8, 1, 3, 9, 4, 5]. Sử dụng <b>giải thuật sắp xếp nổi bọt</b>, sắp xếp mảng theo thứ tự giảm dần.
                </a>
            </div>
            <div id=""Bai2"" class=""collapse container"" data-parent=""#ac");
            WriteLiteral(@"cordion"">
                <br />
                <p>Ta thực hiện các bước:</p>
                <ul>
                    <li><b>Bước 1: </b>Gán i = 0, là phần tử đầu tiên</li>
                    <li><b>Bước 2: </b>Lần lượt so sánh và đổi chỗ (nếu cần) từ phải sang trái đối với các phần tử từ a[n] đến a[i]. Với biến gán j = n-i. Lặp lại khi j > i.</li>
                    <li><b>Bước 3: </b>i = i + 1</li>
                    <li><b>Bước 4: </b>Nêu i < n, quay lại <b>bước 2</b>. Ngược lại, dừng, dãy đã cho đã sắp xếp đúng vị trí.</li>
                </ul>
                <hr />
                <u><b>Bài giải:</b></u>
<pre style=""overflow: auto; font-family:Consolas"" class=""card-body"">
<code>
#include  &lt;iostream&gt;   

using namespace std;

void Bubble_sort(int a[], int n)
{
    for (int i = 0; i< n; i++)
		for (int");
            BeginWriteAttribute("j", " j =", 3579, "", 3583, 0);
            EndWriteAttribute();
            WriteLiteral(" 0; j < n - 1 ; j++)\r\n\t\t\tif (a[j] < a[j + 1]){\r\n                int");
            BeginWriteAttribute("t", " t =", 3650, "", 3654, 0);
            EndWriteAttribute();
            WriteLiteral(" a[j];");
            BeginWriteAttribute("a[j]", "\r\n                a[j] =", 3660, "", 3684, 0);
            EndWriteAttribute();
            WriteLiteral(" a[j + 1];\r\n                a[j +");
            BeginWriteAttribute("1]", " 1] =", 3717, "", 3722, 0);
            EndWriteAttribute();
            WriteLiteral(" t;\r\n\t\t\t}\r\n}\r\nint main()\r\n{\r\n    int");
            BeginWriteAttribute("a[]", " a[] =", 3758, "", 3764, 0);
            EndWriteAttribute();
            WriteLiteral(" {6, 7, 0, 2, 8, 1, 3, 9, 4, 5};\r\n    int");
            BeginWriteAttribute("n", " n =", 3805, "", 3809, 0);
            EndWriteAttribute();
            WriteLiteral(@" sizeof(a)/sizeof(a[0]);
    
    cout << ""Truoc khi sap xep: "" << endl;
    for (int i=0; i < n; i++){
        cout << ""-"" << a[i];
    }
    cout << endl;
    Bubble_sort(a, n);
    
    cout << ""Sau khi sap xep: "" << endl;
    for (int i=0; i < n; i++){
        cout << ""-"" << a[i];
    }
    return 0;
}
</code> 
</pre>
            </div>
        </div>
    </div>
    
    <div id=""chen"">
        <h3>Bài tập tìm kiếm áp dụng giải thuật sắp xếp chèn (Insertion Sort)</h3>
        <div class=""card"">
            <div class=""card-header"">
                <a class=""card-link"" data-toggle=""collapse"" href=""#Bai3"">
                    Bài 3. Cho mảng a có n phần tử, a = [6, 7, 0, 2, 8, 1, 3, 9, 4, 5]. Sử dụng <b>giải thuật sắp xếp chèn</b>, sắp xếp mảng theo thứ tự tăng dần.
                </a>
            </div>
            <div id=""Bai3"" class=""collapse container"" data-parent=""#accordion"">
                <br />
                <u><b>Ý tưởng bài toán</b></u>
                <p>Ta t");
            WriteLiteral(@"hực hiện các bước</p>
                <ul>
                    <li><b>Bước 1: </b>Kiểm tra nếu phần tử đầu tiên đã được sắp xếp. Trả về 1</li>
                    <li><b>Bước 2: </b>Lấy phần tử kế tiếp</li>
                    <li><b>Bước 3: </b>So sánh với tất cả phần tử trong danh sách con đã qua sắp xếp</li>
                    <li><b>Bước 4: </b>Dịch chuyển tất cả phần tử trong danh sách con mà lớn hơn giá trị để được sắp xếp.</li>
                    <li><b>Bước 5: </b>Chèn giá trị đó</li>
                    <li><b>Bước 6: </b>Lặp lại cho tới khi danh sách được sắp xếp</li>
                </ul>
                <hr />
                <u><b>Bài giải:</b></u>
<pre style=""overflow: auto; font-family:Consolas"" class=""card-body"">
<code>
#include &lt;iostream&gt;

using namespace std;

void insertionSort(int a[], int n)
{
	for (int i = 1; i < n; i++)
	{
		int");
            BeginWriteAttribute("x", " x =", 5725, "", 5729, 0);
            EndWriteAttribute();
            WriteLiteral(" a[i];\r\n\t\tint");
            BeginWriteAttribute("j", " j =", 5742, "", 5746, 0);
            EndWriteAttribute();
            WriteLiteral(@" i;
		while (j > 0 && a[j - 1] > x)
		{
			a[j] = a[j - 1];
			j--;
		}
		a[j] = x;
	}
}
int main(){
    int a[] = {6, 7, 0, 2, 8, 1, 3, 9, 4, 5};
    int n = sizeof(a)/sizeof(a[0]);

    cout << ""Truoc khi sap xep: "" << endl;
    for (int i=0; i < n; i++){
        cout << ""-"" << a[i];
    }
    cout << endl;
    insertionSort(a, n);

    cout << ""Sau khi sap xep: "" << endl;
    for (int i=0; i < n; i++){
        cout << ""-"" << a[i];
    }
    return 0;
}
</code> 
</pre>
            </div>
        </div>

        <div class=""card"">
            <div class=""card-header"">
                <a class=""card-link"" data-toggle=""collapse"" href=""#Bai4"">
                    Bài 4. Cho mảng a có n phần tử, a = [6, 7, 0, 2, 8, 1, 3, 9, 4, 5]. Sử dụng <b>giải thuật sắp xếp chèn</b>, sắp xếp mảng theo thứ tự giảm dần.
                </a>
            </div>
            <div id=""Bai4"" class=""collapse container"" data-parent=""#accordion"">
                <br />
                <u><b>Ý tưởng");
            WriteLiteral(@" bài toán</b></u>
                <p>Ta thực hiện các bước</p>
                <ul>
                    <li><b>Bước 1: </b>Kiểm tra nếu phần tử đầu tiên đã được sắp xếp. Trả về 1</li>
                    <li><b>Bước 2: </b>Lấy phần tử kế tiếp</li>
                    <li><b>Bước 3: </b>So sánh với tất cả phần tử trong danh sách con đã qua sắp xếp</li>
                    <li><b>Bước 4: </b>Dịch chuyển tất cả phần tử trong danh sách con mà lớn hơn giá trị để được sắp xếp.</li>
                    <li><b>Bước 5: </b>Chèn giá trị đó</li>
                    <li><b>Bước 6: </b>Lặp lại cho tới khi danh sách được sắp xếp</li>
                </ul>
                <hr />
                <u><b>Bài giải:</b></u>
<pre style=""overflow: auto; font-family:Consolas"" class=""card-body"">
<code>
#include &lt;iostream&gt;

using namespace std;

void insertionSort(int a[], int n)
{
	for (int i = 1; i < n; i++)
	{
		int");
            BeginWriteAttribute("x", " x =", 7704, "", 7708, 0);
            EndWriteAttribute();
            WriteLiteral(" a[i];\r\n\t\tint");
            BeginWriteAttribute("j", " j =", 7721, "", 7725, 0);
            EndWriteAttribute();
            WriteLiteral(" i;\r\n\t\twhile (j > 0 && a[j - 1] < x)\r\n\t\t{");
            BeginWriteAttribute("a[j]", "\r\n\t\t\ta[j] =", 7766, "", 7777, 0);
            EndWriteAttribute();
            WriteLiteral(" a[j - 1];\r\n\t\t\tj--;\r\n\t\t}");
            BeginWriteAttribute("a[j]", "\r\n\t\ta[j] =", 7801, "", 7811, 0);
            EndWriteAttribute();
            WriteLiteral(" x;\r\n\t}\r\n}\r\nint main(){\r\n    int");
            BeginWriteAttribute("a[]", " a[] =", 7843, "", 7849, 0);
            EndWriteAttribute();
            WriteLiteral(" {6, 7, 0, 2, 8, 1, 3, 9, 4, 5};\r\n    int");
            BeginWriteAttribute("n", " n =", 7890, "", 7894, 0);
            EndWriteAttribute();
            WriteLiteral(@" sizeof(a)/sizeof(a[0]);

    cout << ""Truoc khi sap xep: "" << endl;
    for (int i=0; i < n; i++){
        cout << ""-"" << a[i];
    }
    cout << endl;
    insertionSort(a, n);

    cout << ""Sau khi sap xep: "" << endl;
    for (int i=0; i < n; i++){
        cout << ""-"" << a[i];
    }
    return 0;
}
</code> 
</pre>
            </div>
        </div>
    </div>
    
    <div id=""chon"">
        <h3>Bài tập tìm kiếm áp dụng giải thuật sắp xếp chọn (Selection Sort)</h3>
        <div class=""card"">
            <div class=""card-header"">
                <a class=""card-link"" data-toggle=""collapse"" href=""#Bai5"">
                    Bài 5. Cho mảng a có n phần tử, a = [6, 7, 0, 2, 8, 1, 3, 9, 4, 5]. Sử dụng <b>giải thuật sắp xếp chọn</b>, sắp xếp mảng theo thứ tự tăng dần.
                </a>
            </div>
            <div id=""Bai5"" class=""collapse container"" data-parent=""#accordion"">
                <br />
                <u><b>Ý tưởng bài toán</b></u>
                <p>Ta thực hi");
            WriteLiteral(@"ện các bước:</p>
                <ul>
                    <li><b>Bước 1: </b>Thiết lập min về vị trí 0</li>
                    <li><b>Bước 2: </b>Tìm kiếm phần tử nhỏ nhất trong danh sách</li>
                    <li><b>Bước 3: </b>Tráo đổi với giá trị tại vị trí min</li>
                    <li><b>Bước 4: </b>Tăng min lên để chỉ vị trí phấn tử kế tiếp</li>
                    <li><b>Bước 5: </b>Lặp lại cho đến khi hết danh sách</li>
                </ul>
                <hr />
                <u><b>Bài giải:</b></u>
<pre style=""overflow: auto; font-family:Consolas"" class=""card-body"">
<code>
#include &lt;iostream&gt;

using namespace std;

void selectionSort(int a[], int n){
    int i, j, min_idx;
    for (i = 0; i < n-1; i++){");
            BeginWriteAttribute("min_idx", "\r\n        min_idx =", 9674, "", 9693, 0);
            EndWriteAttribute();
            WriteLiteral(" i;\r\n        for");
            BeginWriteAttribute("(j", " (j =", 9709, "", 9714, 0);
            EndWriteAttribute();
            WriteLiteral(" i+1; j < n; j++)\r\n            if (a[j] < a[min_idx])");
            BeginWriteAttribute("min_idx", "\r\n                min_idx =", 9767, "", 9794, 0);
            EndWriteAttribute();
            WriteLiteral(" j;\r\n\r\n        int");
            BeginWriteAttribute("t", " t =", 9812, "", 9816, 0);
            EndWriteAttribute();
            WriteLiteral(" a[min_idx];");
            BeginWriteAttribute("a[min_idx]", "\r\n        a[min_idx] =", 9828, "", 9850, 0);
            EndWriteAttribute();
            WriteLiteral(" a[i];");
            BeginWriteAttribute("a[i]", "\r\n        a[i] =", 9856, "", 9872, 0);
            EndWriteAttribute();
            WriteLiteral(" t;\r\n    }\r\n}\r\nint main(){\r\n    int");
            BeginWriteAttribute("a[]", " a[] =", 9907, "", 9913, 0);
            EndWriteAttribute();
            WriteLiteral(" {6, 7, 0, 2, 8, 1, 3, 9, 4, 5};\r\n    int");
            BeginWriteAttribute("n", " n =", 9954, "", 9958, 0);
            EndWriteAttribute();
            WriteLiteral(@" sizeof(a)/sizeof(a[0]);

    cout << ""Truoc khi sap xep: "" << endl;
    for (int i=0; i < n; i++){
        cout << ""-"" << a[i];
    }
    cout << endl;
    selectionSort(a, n);

    cout << ""Sau khi sap xep: "" << endl;
    for (int i=0; i < n; i++){
        cout << ""-"" << a[i];
    }
    return 0;
}

</code> 
</pre>
            </div>
        </div>
        <div class=""card"">
            <div class=""card-header"">
                <a class=""card-link"" data-toggle=""collapse"" href=""#Bai6"">
                    Bài 6. Cho mảng a có n phần tử, a = [6, 7, 0, 2, 8, 1, 3, 9, 4, 5]. Sử dụng <b>giải thuật sắp xếp chọn</b>, sắp xếp mảng theo thứ tự giảm dần.
                </a>
            </div>
            <div id=""Bai6"" class=""collapse container"" data-parent=""#accordion"">
                <br />
                <u><b>Ý tưởng bài toán</b></u>
                <p>Ta thực hiện các bước:</p>
                <ul>
                    <li><b>Bước 1: </b>Thiết lập max về vị trí 0</li>
          ");
            WriteLiteral(@"          <li><b>Bước 2: </b>Tìm kiếm phần tử lớn nhất trong danh sách</li>
                    <li><b>Bước 3: </b>Tráo đổi với giá trị tại vị trí max</li>
                    <li><b>Bước 4: </b>Tăng max lên để chỉ vị trí phấn tử kế tiếp</li>
                    <li><b>Bước 5: </b>Lặp lại cho đến khi hết danh sách</li>
                </ul>
                <hr />
                <u><b>Bài giải:</b></u>
<pre style=""overflow: auto; font-family:Consolas"" class=""card-body"">
<code>
#include &lt;iostream&gt;

using namespace std;

void selectionSort(int a[], int n){
    int i, j, max_idx;
    for (i = 0; i < n-1; i++){");
            BeginWriteAttribute("max_idx", "\r\n        max_idx =", 11617, "", 11636, 0);
            EndWriteAttribute();
            WriteLiteral(" i;\r\n        for");
            BeginWriteAttribute("(j", " (j =", 11652, "", 11657, 0);
            EndWriteAttribute();
            WriteLiteral(@" i+1; j < n; j++)
            if (a[j] > a[max_idx])
                max_idx = j;

        int t = a[max_idx];
        a[max_idx] = a[i];
        a[i] = t;
    }
}
int main(){
    int a[] = {6, 7, 0, 2, 8, 1, 3, 9, 4, 5};
    int n = sizeof(a)/sizeof(a[0]);

    cout << ""Truoc khi sap xep: "" << endl;
    for (int i=0; i < n; i++){
        cout << ""-"" << a[i];
    }
    cout << endl;
    selectionSort(a, n);

    cout << ""Sau khi sap xep: "" << endl;
    for (int i=0; i < n; i++){
        cout << ""-"" << a[i];
    }
    return 0;
}

</code> 
</pre>
            </div>
        </div>
    </div>
   
    <div id=""nhanh"">
        <h3>Bài tập tìm kiếm áp dụng giải thuật sắp xếp nhanh (Quick Sort)</h3>
        <div class=""card"">
            <div class=""card-header"">
                <a class=""card-link"" data-toggle=""collapse"" href=""#Bai7"">
                    Bài 7. Cho mảng a có n phần tử, a = [6, 7, 0, 2, 8, 1, 3, 9, 4, 5]. Sử dụng <b>giải thuật sắp xếp nhanh</b>, sắp xếp mảng the");
            WriteLiteral(@"o thứ tự tăng dần.
                </a>
            </div>
            <div id=""Bai7"" class=""collapse container"" data-parent=""#accordion"">
                <br />
                <u><b>Ý tưởng bài toán</b></u>
                <p>Ta thực hiện các bước sau:</p>
                <ul>
                    <li><b>Bước 1: </b>Lấy phần tử chốt là phần tử ở cuối danh sách</li>
                    <li><b>Bước 2: </b>Chia mảng bởi sử dụng phần tử chốt</li>
                    <li><b>Bước 3: </b>Sử dụng sắp xếp nhanh một cách đệ quy với mảng con bên trái.</li>
                    <li><b>Bước 4: </b>Sử dụng sắp xếp nhanh một cách đệ quy với mảng con bên phải.</li>
                    <li><b>Bước 5: </b>Nếu left &ge; right, dừng đệ quy</li>
                </ul>
                <hr />
                <u><b>Bài giải:</b></u>
<pre style=""overflow: auto; font-family:Consolas"" class=""card-body"">
<code>
#include &lt;iostream&gt;

using namespace std;

int partition (int a[], int low, int high)
{
    int pi");
            WriteLiteral(@"vot = a[high];
    int left = low;
    int right = high - 1;
    while(true){
        while(left <= right && a[left] < pivot) left++;
        while(right >= left && a[right] > pivot) right--;
        if (left >= right) break; 
        int t = a[left];
        a[left] = a[right];
        a[right] = t;
        left++; 
        right--; 
    }
    int t = a[left];
        a[left] = a[high];
        a[high] = t;
    return left; 
}

void quickSort(int a[], int low, int high)
{
    if (low < high)
    {
        int");
            BeginWriteAttribute("pi", " pi =", 14243, "", 14248, 0);
            EndWriteAttribute();
            WriteLiteral(" partition(a, low, high);\r\n        quickSort(a, low, pi - 1);\r\n        quickSort(a, pi + 1, high);\r\n    }\r\n}\r\nint main(){\r\n    int");
            BeginWriteAttribute("a[]", " a[] =", 14378, "", 14384, 0);
            EndWriteAttribute();
            WriteLiteral(" {6, 7, 0, 2, 8, 1, 3, 9, 4, 5};\r\n    int");
            BeginWriteAttribute("n", " n =", 14425, "", 14429, 0);
            EndWriteAttribute();
            WriteLiteral(@" sizeof(a)/sizeof(a[0]);

    cout << ""Truoc khi sap xep: "" << endl;
    for (int i=0; i < n; i++){
        cout << ""-"" << a[i];
    }
    cout << endl;
    quickSort(a, 0, n-1);

    cout << ""Sau khi sap xep: "" << endl;
    for (int i=0; i < n; i++){
        cout << ""-"" << a[i];
    }
   
</code> 
</pre>
            </div>
        </div>
        <div class=""card"">
            <div class=""card-header"">
                <a class=""card-link"" data-toggle=""collapse"" href=""#Bai8"">
                    Bài 8. Cho mảng a có n phần tử, a = [6, 7, 0, 2, 8, 1, 3, 9, 4, 5]. Sử dụng <b>giải thuật sắp xếp nhanh</b>, sắp xếp mảng theo thứ tự giảm dần.
                </a>
            </div>
            <div id=""Bai8"" class=""collapse container"" data-parent=""#accordion"">
                <br />
                <u><b>Ý tưởng bài toán</b></u>
                <p>Ta thực hiện các bước sau:</p>
                <ul>
                    <li><b>Bước 1: </b>Lấy phần tử chốt là phần tử ở cuối danh sách</li>
");
            WriteLiteral(@"                    <li><b>Bước 2: </b>Chia mảng bởi sử dụng phần tử chốt</li>
                    <li><b>Bước 3: </b>Sử dụng sắp xếp nhanh một cách đệ quy với mảng con bên trái.</li>
                    <li><b>Bước 4: </b>Sử dụng sắp xếp nhanh một cách đệ quy với mảng con bên phải.</li>
                    <li><b>Bước 5: </b>Nếu left &ge; right, dừng đệ quy</li>
                </ul>
                <hr />
                <u><b>Bài giải:</b></u>
<pre style=""overflow: auto; font-family:Consolas"" class=""card-body"">
<code>
#include &lt;iostream&gt;

using namespace std;

int partition (int a[], int low, int high)
{
    int pivot = a[high];
    int left = low;
    int right = high - 1;
    while(true){
        while(left <= right && a[left] > pivot) left++;
        while(right >= left && a[right] < pivot) right--;
        if (left >= right) break;
        int t = a[left];
        a[left] = a[right];
        a[right] = t;
        left++;
        right--;
    }
    int t = a[left];
   ");
            WriteLiteral("     a[left] = a[high];\r\n        a[high] = t;\r\n    return left;\r\n}\r\n\r\nvoid quickSort(int a[], int low, int high)\r\n{\r\n    if (low < high)\r\n    {\r\n        int");
            BeginWriteAttribute("pi", " pi =", 16633, "", 16638, 0);
            EndWriteAttribute();
            WriteLiteral(" partition(a, low, high);\r\n        quickSort(a, low, pi - 1);\r\n        quickSort(a, pi + 1, high);\r\n    }\r\n}\r\nint main(){\r\n    int");
            BeginWriteAttribute("a[]", " a[] =", 16768, "", 16774, 0);
            EndWriteAttribute();
            WriteLiteral(" {6, 7, 0, 2, 8, 1, 3, 9, 4, 5};\r\n    int");
            BeginWriteAttribute("n", " n =", 16815, "", 16819, 0);
            EndWriteAttribute();
            WriteLiteral(@" sizeof(a)/sizeof(a[0]);

    cout << ""Truoc khi sap xep: "" << endl;
    for (int i=0; i < n; i++){
        cout << ""-"" << a[i];
    }
    cout << endl;
    quickSort(a, 0, n-1);

    cout << ""Sau khi sap xep: "" << endl;
    for (int i=0; i < n; i++){
        cout << ""-"" << a[i];
    }
   
</code> 
</pre>
            </div>
        </div>
    </div>
    
    <div id=""heap"">
        <h3>Bài tập tìm kiếm áp dụng giải thuật sắp xếp vun đống (Heap Sort)</h3>
        <div class=""card"">
            <div class=""card-header"">
                <a class=""card-link"" data-toggle=""collapse"" href=""#Bai9"">
                    Bài 9. Cho mảng a có n phần tử, a = [6, 7, 0, 2, 8, 1, 3, 9, 4, 5]. Sử dụng <b>giải thuật sắp xếp vun đống</b>, sắp xếp mảng theo thứ tự tăng dần.
                </a>
            </div>
            <div id=""Bai9"" class=""collapse container"" data-parent=""#accordion"">
                <br />
                <u><b>Ý tưởng bài toán</b></u>
                <p>Ta thực hiện các bư");
            WriteLiteral(@"ớc:</p>
                <ul>
                    <li><b>Bước 1: </b>Lần lượt lấy từng phần tử từ mảng</li>
                    <li><b>Bước 2: </b>So sánh giá trị nút con với giá trị cha</li>
                    <li><b>Bước 3: </b>Nếu giá trị của cha là nhỏ hơn con thì tráo đổi chúng.</li>
                    <li><b>Bước 4: </b>Lặp lại <b>bước 2</b> và <b>bước 3</b> cho đến khi vẫn duy trì đặc điểm của max heap.</li>
                    <li><b>Bước 5: </b>Lần lượt lấy giá trị nút gốc ra, thay bằng nút cao nhất bên phải.</li>
                    <li><b>Bước 6: </b>Lặp lại cho tới khi cây heap không còn nút nào.</li>
                </ul>
                <hr />
                <u><b>Bài giải:</b></u>
<pre style=""overflow: auto; font-family:Consolas"" class=""card-body"">
<code>
#include &lt;iostream&gt;

using namespace std;

void heapify(int arr[], int n, int i)
{
    int largest = i;
    int l = 2 * i + 1; 
    int r = 2 * i + 2; 

    if (l < n && arr[l] > arr[largest])
        largest = ");
            WriteLiteral(@"l;

    if (r < n && arr[r] > arr[largest])
        largest = r;

    if (largest != i) {
        swap(arr[i], arr[largest]);
        heapify(arr, n, largest);
    }
}

void heapSort(int arr[], int n)
{
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);

    for (int i = n - 1; i > 0; i--) {
        swap(arr[0], arr[i]);
        heapify(arr, i, 0);
    }
}

int main(){
    int a[] = {6, 7, 0, 2, 8, 1, 3, 9, 4, 5};
    int n = sizeof(a)/sizeof(a[0]);

    cout << ""Truoc khi sap xep: "" << endl;
    for (int i=0; i < n; i++){
        cout << ""-"" << a[i];
    }
    cout << endl;
    heapSort(a, n);

    cout << ""Sau khi sap xep: "" << endl;
    for (int i=0; i < n; i++){
        cout << ""-"" << a[i];
    }
    return 0;
}

</code> 
</pre>
            </div>
        </div>
        <div class=""card"">
            <div class=""card-header"">
                <a class=""card-link"" data-toggle=""collapse"" href=""#Bai10"">
                    Bài 10. Cho mảng a có ");
            WriteLiteral(@"n phần tử, a = [6, 7, 0, 2, 8, 1, 3, 9, 4, 5]. Sử dụng <b>giải thuật sắp xếp vun đống</b>, sắp xếp mảng theo thứ tự giảm dần.
                </a>
            </div>
            <div id=""Bai10"" class=""collapse container"" data-parent=""#accordion"">
                <br />
                <u><b>Ý tưởng bài toán</b></u>
                <p>Ta thực hiện các bước:</p>
                <ul>
                    <li><b>Bước 1: </b>Lần lượt lấy từng phần tử từ mảng</li>
                    <li><b>Bước 2: </b>So sánh giá trị nút con với giá trị cha</li>
                    <li><b>Bước 3: </b>Nếu giá trị của cha là nhỏ hơn con thì tráo đổi chúng.</li>
                    <li><b>Bước 4: </b>Lặp lại <b>bước 2</b> và <b>bước 3</b> cho đến khi vẫn duy trì đặc điểm của max heap.</li>
                    <li><b>Bước 5: </b>Lần lượt lấy giá trị nút gốc ra, thay bằng nút cao nhất bên phải.</li>
                    <li><b>Bước 6: </b>Lặp lại cho tới khi cây heap không còn nút nào.</li>
                </ul>
          ");
            WriteLiteral(@"      <hr />
                <u><b>Bài giải:</b></u>
<pre style=""overflow: auto; font-family:Consolas"" class=""card-body"">
<code>
#include &lt;iostream&gt;

using namespace std;

void heapify(int arr[], int n, int i)
{
    int smallest = i;
    int l = 2 * i + 1;
    int r = 2 * i + 2;

    if (l < n && arr[l] < arr[smallest])");
            BeginWriteAttribute("smallest", "\r\n        smallest =", 21256, "", 21276, 0);
            EndWriteAttribute();
            WriteLiteral(" l;\r\n\r\n    if (r < n && arr[r] < arr[smallest])");
            BeginWriteAttribute("smallest", "\r\n        smallest =", 21323, "", 21343, 0);
            EndWriteAttribute();
            WriteLiteral(" r;\r\n\r\n    if (smallest");
            BeginWriteAttribute("!", " !=", 21366, "", 21369, 0);
            EndWriteAttribute();
            WriteLiteral(" i) {\r\n        swap(arr[i], arr[smallest]);\r\n        heapify(arr, n, smallest);\r\n    }\r\n}\r\n\r\nvoid heapSort(int arr[], int n)\r\n{\r\n    for (int");
            BeginWriteAttribute("i", " i =", 21510, "", 21514, 0);
            EndWriteAttribute();
            WriteLiteral(@" n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);

    for (int i = n - 1; i > 0; i--) {
        swap(arr[0], arr[i]);
        heapify(arr, i, 0);
    }
}

int main(){
    int a[] = {6, 7, 0, 2, 8, 1, 3, 9, 4, 5};
    int n = sizeof(a)/sizeof(a[0]);

    cout << ""Truoc khi sap xep: "" << endl;
    for (int i=0; i < n; i++){
        cout << ""-"" << a[i];
    }
    cout << endl;
    heapSort(a, n);

    cout << ""Sau khi sap xep: "" << endl;
    for (int i=0; i < n; i++){
        cout << ""-"" << a[i];
    }
    return 0;
}

</code> 
</pre>
            </div>
        </div>
    </div>
</div>
<div>
    <br />
    <br />
    <br />
    <br />
    <br />
    <br />
</div>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
