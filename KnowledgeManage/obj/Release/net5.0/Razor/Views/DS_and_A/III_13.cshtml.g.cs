#pragma checksum "C:\Users\Akaiki\source\repos\KnowledgeManage\KnowledgeManage\Views\DS_and_A\III_13.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "c2721a142386f4031d97b590fde92ece60f741b7"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_DS_and_A_III_13), @"mvc.1.0.view", @"/Views/DS_and_A/III_13.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Akaiki\source\repos\KnowledgeManage\KnowledgeManage\Views\_ViewImports.cshtml"
using KnowledgeManage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Akaiki\source\repos\KnowledgeManage\KnowledgeManage\Views\_ViewImports.cshtml"
using KnowledgeManage.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c2721a142386f4031d97b590fde92ece60f741b7", @"/Views/DS_and_A/III_13.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d8b91396dfbb5c43e5379ee682f129446bb1c6c7", @"/Views/_ViewImports.cshtml")]
    public class Views_DS_and_A_III_13 : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Image/Madituan.jpg"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Image/nQuanHau.jpg"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "C:\Users\Akaiki\source\repos\KnowledgeManage\KnowledgeManage\Views\DS_and_A\III_13.cshtml"
  
    ViewData["Title"] = "III_13";
    Layout = "~/Views/DS_and_A/Menu.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<style>
    img {
        display: inline-block;
        max-width: 100%;
        max-height: 100%;
        display: block;
        margin: 0 auto;
        text-align: center;
    }
</style>
<div id=""accordion"" style=""padding-left: 15%; padding-right: 15%; "">
    <h1>BÀI TẬP VỀ GIẢI THUẬT QUAY LUI</h1>
    <p class=""alert-warning"">BẠN CÓ THỂ NHẤN VÀO ĐỂ XEM BÀI GIẢI</p>

    <h3>Bài tập ứng dụng giải thuật quay lui</h3>
    <div id=""sudoku"">
        <h3>Trò chơi Sudoku</h3>
        <p>Sudoku là một trò chơi được miêu tả như sau: có một hình vuông được chia thành 9x9 ô vuông con. Mỗi ô vuông con có giá trị trong khoảng từ 1 đến 9. Ban đầu hình vuông có một số ô vuông con cho trước (có điền sẵn số) và còn lại là trống. Hãy điền các số từ 1-9 vào các ô con lại sao cho: hàng ngang là các số khác nhau từ 1 đến 9, hàng dọc là các số khác nhau từ 1 đến 9, và mỗi khối 3x3 chính là các số khác nhau từ 1 đến 9. </p>
        <div class=""card"">
            <div class=""card-header"">
                <");
            WriteLiteral(@"a class=""card-link"" data-toggle=""collapse"" href=""#Bai1"">
                    Bài 1. Áp dụng quay lui để giải bài toán sudoku
                </a>
            </div>
            <div id=""Bai1"" class=""collapse container"" data-parent=""#accordion"">
                <br />
                <u><b>Ý tưởng bài toán</b></u>
                <p>Mỗi bước tìm tập các giá trị khả dĩ để điền vào ô trống, và sau đó đệ quy để điền ô tiếp theo. </p>
                <u><b>Bài giải:</b></u>
<pre style=""overflow: auto; font-family:Consolas"" class=""card-body"">
<code>
boolean checkValid(int S[][9], int x, int y, int k){
    for(int i = 0; i < 9 ; i++){");
            BeginWriteAttribute("if(S[x][i]", "\r\n        if(S[x][i] =", 1761, "", 1783, 0);
            EndWriteAttribute();
            WriteLiteral("= k) return false;\r\n    }\r\n    for(int i = 0; i < 9 ; i++){");
            BeginWriteAttribute("if(S[i][y]", "\r\n        if(S[i][y] =", 1842, "", 1864, 0);
            EndWriteAttribute();
            WriteLiteral("= k) return false;\r\n    }\r\n    int a = x/3,");
            BeginWriteAttribute("b", " b =", 1907, "", 1911, 0);
            EndWriteAttribute();
            WriteLiteral(" y/3;\r\n    for(int");
            BeginWriteAttribute("i", " i =", 1929, "", 1933, 0);
            EndWriteAttribute();
            WriteLiteral(" 3*a; i < 3*a+3; i++){\r\n        for(int");
            BeginWriteAttribute("j", " j =", 1972, "", 1976, 0);
            EndWriteAttribute();
            WriteLiteral(" 3*b; j < 3*b+3; j++){");
            BeginWriteAttribute("if(S[i][j]", "\r\n            if(S[i][j] =", 1998, "", 2024, 0);
            EndWriteAttribute();
            WriteLiteral(@"= k) return false;
        }
    }
    return true;
}

void solveSudoku(int S[][9], int x, int y){
    if(y == 9){
        if(x == 8){
            printSolution(S);
            exit(0);
        } else {
            solveSudoku(S, x+1,0);
        }
    } else if(S[x][y] == 0){
        for (int k = 1; k <=9; k++){
            if(checkValid(S,x,y,k)){
                S[x][y] = k;
                solveSudoku(S, x, y+1);
                S[x][y] = 0;
            }
        }
    } else {
        solveSudoku(S,x,y+1);
    }
}

</code> 
</pre>
            </div>
        </div>
    </div>
    <div id=""madituan"">
        <h3>Bài toán Mã đi tuần</h3>
        <p>Cho bàn cờ có kích thước n*n ô. Một quân mã được đặt tại ô ban đầu có tọa độ x<sub>0</sub>, y<sub>0</sub> và được phép dịch chuyển theo luật cờ thông thường. Bài toán đặt ra là từ ô đầu, tìm một chuỗi các nước đi của quân mã, sao cho quân mã này đi qua tất cả các ô của bàn cờ, mỗi ô đúng 1 lần.</p>
        <div class=""card"">
   ");
            WriteLiteral(@"         <div class=""card-header"">
                <a class=""card-link"" data-toggle=""collapse"" href=""#Bai2"">
                    Bài 2. Áp dụng quay lui để giải bài toán Mã đi tuần
                </a>
            </div>
            <div id=""Bai2"" class=""collapse container"" data-parent=""#accordion"">
                <br />
                <u><b>Ý tưởng bài toán</b></u>
                <p>Ta xem xét vấn đề đơn giản hơn là tìm kiếm nước đi tiếp theo của quân mã, hoặc kết luận rằng không còn nước đi kế tiếp thỏa mãn.</p>
                <p>Tại mỗi bước, nếu có thể tìm kiếm được một nước đi kế tiếp, ta tiến hành ghi lại nước đi này cùng với chuỗi các nước đi trước đó và tiếp tục quá trình tìm kiếm nước đi. Nếu tại bước nào đó, không thể tìm nước đi kế tiếp thỏa mãn yêu cầu của bài toán, ta quay trở lại bước trước, hủy bỏ nước đi đã lưu lại trước đó và thử sang một nước mới. Quá trình có thể phải thử rồi quay lại nhiều lần, cho đến khi tìm ra giải pháp hoặc đã thử hết các phương án mà không tìm ra giải phá");
            WriteLiteral(@"p.</p>
                <p>Quá trình thử nước tiếp theo có thể được mô tả bằng hàm như sau:</p>
<pre style=""overflow: auto; font-family:Consolas"" class=""card-body"">
<code>
void ThuNuocTiepTheo(){
    //Khởi tạo danh sách các nước đi kế tiếp
    do {
        //Lựa chọn 1 nước đi kế tiếp từ danh sách
        if Chấp nhận được{
            //Ghi lại nước đi
            if Bàn cờ còn ô trống{
                ThuNuocTiepTheo();
                if Nước đi không thành công
                    //Hủy bỏ nước đi đã lưu ở bước trước
            }    
        }
    } while (nước đi không thành công && vẫn còn nước đi)
}

</code> 
</pre>
                <p>Theo luật cờ, quân mã từ ô (x, y) có thể đi tới 8 ô như sau:</p>
                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c2721a142386f4031d97b590fde92ece60f741b79836", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                <p>8 ô mà quân mã có thể đi tới từ ô (x, y) có thể tính tương đối so với (x, y) là:</p>
                <p>(x + 2, y - 1); (x + 1, y - 2); (x - 1, y - 2); (x - 2, y - 1); (x - 2, y + 1); (x - 1, y + 2); (x + 1, y + 2); (x + 2, y + 1)</p>
                <p>Nếu gọi dx, dy là các giá trị mà x, y lần lượt phải cộng vào để tạo thành ô mã quân mã có thể đi tới, thì ta gán cho dx, dy mảng có giá trị:</p>
                <ul>
                    <li>- dx = {2, 1, -1, -2, -2, -1, 1, 2}</li>
                    <li>- dy = {-1, -2, -2, -1, 1, 2, 2, 1}</li>
                </ul>
                <p>Như vậy, danh sách các nước đi kế tiếp (u, v) có thể được tạo ra như sau:</p>
                <ul>
                    <li>- u = x + dx[i]</li>
                    <li>- v = y + dy[i]</li>
                    <li>Với i = 1..8</li>
                </ul>
                <p>Kèm thêm điều kiện 0 &le; u,v &lt; n, để bảo đảm u, v luôn hợp lệ (luôn nằm trong bàn cờ)</p>
                <u><b>Bài giải:<");
            WriteLiteral(@"/b></u>                
                <p>Từ ý tưởng trên, ta có code:</p>
<pre style=""overflow: auto; font-family:Consolas"" class=""card-body"">
<code>

#define maxn 10

int BanCo[maxn][maxn];
int dx[8] = {2, 1, -1, -2, -2, -1, 1, 2};
int dy[8] = {-1, -2, -2, -1, 1, 2, 2, 1};
int n = 8

void ThuNuocTiepTheo (int i, int x, int y, int *q){
    int k, u, v, *q1;
    k = 0;
    do {
        *q1 = 0;
        u = x + dx[k];
        v = y + dy[k];
        if ((0 <= u) && (u < n) && (0 <= v) && (v < n) &&");
            BeginWriteAttribute("(BanCo[u][v]", " (BanCo[u][v] =", 6404, "", 6419, 0);
            EndWriteAttribute();
            WriteLiteral("= 0)){\r\n            BanCo[u][v] = i;\r\n            if (i < n*n){\r\n                ThuNuocTiepThep(i+1, u, v, q1);\r\n                if");
            BeginWriteAttribute("((*q1)", " ((*q1) =", 6551, "", 6560, 0);
            EndWriteAttribute();
            WriteLiteral("= 0)\r\n                    BanCo[u][v] = 0;\r\n            }\r\n            else\r\n                (*q1) = 1;\r\n        }\r\n        k++;\r\n    } while (((*q1) == 0) && (k < 8));");
            BeginWriteAttribute("*q", "\r\n    *q =", 6728, "", 6738, 0);
            EndWriteAttribute();
            WriteLiteral(@" *q1;
}
</code> 
</pre>
            </div>
        </div>
    </div>
    <div id=""8quanhau"">
        <h3>Bài toán 8 quân hậu</h3>
        <p>Cho một bàn cờ hình vuông kích thước 8*8 và 8 quân hậu. Hãy tìm cách đặt 8 quân hậu trên bàn cờ sao cho không có 2 quân hậu nào có thể ăn được nhau.</p>
        <div class=""card"">
            <div class=""card-header"">
                <a class=""card-link"" data-toggle=""collapse"" href=""#Bai3"">
                    Bài 3. Áp dụng quay lui để giải bài toán 8 quân hậu
                </a>
            </div>
            <div id=""Bai3"" class=""collapse container"" data-parent=""#accordion"">
                <br />
                <u><b>Ý tưởng bài toán</b></u>
                <p>Ta xem xét vấn đề đơn giản hơn là tìm kiếm cách đặt quân hậu tiếp theo, hoặc kết luận rằng không còn đặt được.</p>
                <p>Tại mỗi bước, nếu có thể tìm kiếm được một cách đặt quân hậu tiếp theo, ta tiến hành ghi lại cách đặt này cùng với chuỗi các cách đặt trước đó và tiếp tục q");
            WriteLiteral(@"uá trình tìm kiếm cách đặt. Nếu tại bước nào đó, không thể đặt quân hậu tiếp theo thỏa mãn yêu cầu của bài toán, ta quay trở lại bước trước, hủy bỏ nước đi đã lưu lại trước đó và thử sang một nước mới. Quá trình có thể phải thử rồi quay lại nhiều lần, cho đến khi tìm ra giải pháp hoặc đã thử hết các phương án mà không tìm ra giải pháp.</p>
                <p>Ta có hàm tìm vị trí đặt quân hậu tiếp theo như sau:</p>
<pre style=""overflow: auto; font-family:Consolas"" class=""card-body"">
<code>
void DatHau (int i){
    // Khởi tạo danh sách các vị trí có thể đặt quân hậu tiếp theo
    do {
        //Lựa chọn vị trí đặt quân hậu tiếp theo
        if Vị trí đặt hợp lệ {
            //Đặt hậu
            if i < 8 {
                DatHau(i + 1);
                if Không thành công
                    Bỏ hậu đã đặt ra khỏi vị trí
            }
        }
    } while (không thành công && vẫn còn lựa chọn)
}
</code> 
</pre>
                <p>Theo luật cờ, quân hậu sẽ đi như sau:</p>
                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c2721a142386f4031d97b590fde92ece60f741b715302", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                <p>Đối với mỗi ô trọng cột, sẽ có 1 hàng và 2 đường chéo đi qua nó là đường chéo trái và đường chéo phải.</p>
                <p>Ta dùng 4 mảng kểu boolean để biểu thị cho các hàng, các đường chéo (có 15 đường chéo trái, 15 đường chéo phải)</p>
                <ul>
                    <li>int a[8] // mảng hàng</li>
                    <li>int b[15], c[15]; // mảng chéo</li>
                </ul>
                <p>Trong đó: </p>
                <ul>
                    <li>a[j] = 0 // Hàng dọc j chưa bị chiếm bởi quân hậu nào.</li>
                    <li>b[k] = 0 // Đường chéo phải k chưa bị chiếm bởi quân hậu nào.</li>
                    <li>c[k] = 0 // Đường chéo trái k chưa bị chiếm bởi quân hậu nào.</li>
                </ul>
                <p>Để kiểm tra ô (i, j) có an toàn không, ta chỉ cần kiểm tra xem hàng j và các đường chéo (i + j), (i - j + 7) đã bị chiếm chưa, tức là kiếm tra a[i], b[i + j] và c[i - j + 7].</p>
                <p>Ngoài ra còn có 1 mảng x để lưu tr");
            WriteLiteral(@"ữ chỉ số hàng của quân hậu trong cột i.</p>
                <p>Vậy, thao tác đặt hậu ta thực hiện công việc:</p>
                <p>x[i] = j; a[j] = 1; b[i+j] = 1; c[i-j+7] =1;</p>
                <p>Thao tác bỏ hậu ra khỏi hàng j cột i, ta cần thực hiện các công việc</p>
                <p>a[j] = 0; b[i + j] =0; c[i-j+7]=0</p>
                <u><b>Bài giải:</b></u>
                <p>Từ phân tích trên, ta có mã giả sau:</p>
<pre style=""overflow: auto; font-family:Consolas"" class=""card-body"">
<code>
void DatHau (int i, int *q){
    int j = 0;
    do{
        *q =0;
        if ((a[j] == 0) && (b[i+j] == 0) && (c[i-j+7] == 0)){
            x[i] = j;
            a[j] = 1; 
            b[i+j] = 1; 
            c[i-j+7] = 1;
            if (i < 7){
                DatHau(i+1, q);
                if");
            BeginWriteAttribute("((*q)", " ((*q) =", 10668, "", 10676, 0);
            EndWriteAttribute();
            WriteLiteral(@"= 0){
                    a[j] = 0; 
                    b[i+j] = 0; 
                    c[i-j+7] = 0;
                }
            }
            else 
                (*q) = 1;
        }
        j++;
    } while((*q == 0)  && (j < 8))
}
</code> 
</pre>
            </div>
        </div>
    </div>
    <div>
        <br />
        <br />
        <br />
        <br />
        <br />
        <br />
    </div>
</div>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
