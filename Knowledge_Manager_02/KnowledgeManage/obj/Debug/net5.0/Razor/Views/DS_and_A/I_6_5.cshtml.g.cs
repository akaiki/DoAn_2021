#pragma checksum "C:\Users\Akaiki\source\repos\KnowledgeManage\KnowledgeManage\Views\DS_and_A\I_6_5.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "7a9105967e3eaf211a859b7c948ddf4dd8426cbc"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_DS_and_A_I_6_5), @"mvc.1.0.view", @"/Views/DS_and_A/I_6_5.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Akaiki\source\repos\KnowledgeManage\KnowledgeManage\Views\_ViewImports.cshtml"
using KnowledgeManage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Akaiki\source\repos\KnowledgeManage\KnowledgeManage\Views\_ViewImports.cshtml"
using KnowledgeManage.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"7a9105967e3eaf211a859b7c948ddf4dd8426cbc", @"/Views/DS_and_A/I_6_5.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d8b91396dfbb5c43e5379ee682f129446bb1c6c7", @"/Views/_ViewImports.cshtml")]
    public class Views_DS_and_A_I_6_5 : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Image/heap.jpg"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("zoom"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("style", new global::Microsoft.AspNetCore.Html.HtmlString("text-align:center"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Image/Max-heap.gif"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Image/Min-heap.gif"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "C:\Users\Akaiki\source\repos\KnowledgeManage\KnowledgeManage\Views\DS_and_A\I_6_5.cshtml"
  
    ViewData["Title"] = "I_6_5";
    Layout = "~/Views/DS_and_A/Menu.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"<style>
    .zoom {
        /*padding: 50px;*/
        background-color: green;
        transition: transform .2s; /* Animation */
        margin: 0 auto;
    }

        .zoom:hover {
            transform: scale(1.3); /* (130% zoom - Note: if the zoom is too large, it will go outside of the viewport) */
        }

    img {
        display: inline-block;
        max-width: 100%;
        max-height: 100%;
        display: block;
        margin: 0 inherit;
    }
</style>
<div style=""padding-left: 15%; padding-right: 15%; "">
    <h1>CÂY HEAP</h1>
    <div class=""container"" id=""I_6_5_1"">
        <h3>Khái niệm cây heap</h3>
        <p>Heap là loại cấu trúc dữ liệu dạng cây, tất cả các node trong cây đó được sắp xếp theo một thứ tự nhất định, có thể là theo chiều tăng dần hoặc giảm dần.</p>
        <p>Giả sửu ta có A là node cha của B, tuân theo định nghĩa của heap, nếu giá trị của node A lớn hơn giá trị của node B thì quan hệ này cũng được áp dụng cho toàn bộ cây. Có nghĩa là giá trị của ");
            WriteLiteral(@"node B sẽ lớn hơn giá trị của node con của nó và cứ vậy, thứ tự được áp dụng cho toàn bộ cây.</p>
        <p>Số con tối đa của một node trong cây heap phụ thuộc vào từng loại heap. Trong thực tế ta có nhiều loại heap nhưng loại được dùng phổ biến là heap nhị phân. Nên ta chỉ xét cây heap nhị phân. Để hiểu rõ hơn về cây nhị phân, các bạn có thể xem lại <b>cây nhị phân</b> <a href=""I_6_4"">tại đây</a></p>
        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "7a9105967e3eaf211a859b7c948ddf4dd8426cbc6674", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
        <p style=""text-align: center""><b>Cây heap nhị phân hoàn thiện</b></p>
        <br />
        <p>Có thể thấy trong hình trên, các node trong cây đều có giá trị tuân theo một quy luật, đó là giá trị của node cha luôn luôn lớn hơn giá trị của node con.</p>
    </div>
    <div class=""container"" id=""I_6_5_2"">
        <h3>Cài đặt cây heap</h3>
        <p>Các node trong heap có thể được sắp xếp theo thứ tự tăng dần hoặc giảm dần nên ta có 2 loại heap là max heap và min heap. Do đó ta cũng có 2 cách cài đặt:</p>
        <ul>
            <li> - <a href=""#max_heap"">Cài đặt max heap</a></li>
            <li> - <a href=""#min_heap"">Cài đặt min heap</a></li>
        </ul>
        <p>Việc này kết hợp với <a href=""#I_6_5_3"">duyệt cây heap</a> sẽ là thuật toán sắp xếp vun đống (heap sort)</p>
        <hr />
        <div id=""max_heap"">
            <p><b>Cài đặt max heap</b></p>
            <p>Với max heap, giá trị của node cha luôn luôn lớn hơn hoặc bằng giá trị của node con, node gốc có giá trị lớn nh");
            WriteLiteral(@"ất trong cây.</p>
            <p>Ta có các bước để chuyển một mảng thành max-heap:</p>
            <ul>
                <li><p> B1. Lấy một phần tử từ mảng.</p></li>
                <li><p> B2. So sánh giá trị của nút con với giá trị cha.</p></li>
                <li><p> B3. Nếu giá trị của cha là nhỏ hơn con thì tráo đổi chúng.</p></li>
                <li><p> B4. Lặp lại B2 và B3 cho đến khi vẫn duy trì đặc điểm của max heap.</p></li>
            </ul>
            <p>Giả sử ta có mảng: {0, 1, 2, 3, 4, 5, 6}.</p>
            <p>Ta có minh họa xây dựng max heap sau:</p>
            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "7a9105967e3eaf211a859b7c948ddf4dd8426cbc9536", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            <br />
        </div>
        <div id=""min_heap"">
            <p><b>Cài đặt min heap</b></p>
            <p>Với min heap, giá trị của node cha luôn luôn bé hơn hoặc bằng giá trị của node con, node gốc có giá trị bé nhất trong cây.</p>
            <p>Ta có các bước để chuyển một mảng thành min heap:</p>
            <ul>
                <li><p> B1. Lấy một phần tử từ mảng.</p></li>
                <li><p> B2. So sánh giá trị của nút con với giá trị cha.</p></li>
                <li><p> B3. Nếu giá trị của cha là lớn hơn con thì tráo đổi chúng.</p></li>
                <li><p> B4. Lặp lại B2 và B3 cho đến khi vẫn duy trì đặc điểm của max heap.</p></li>
            </ul>
            <p>Giả sử ta có mảng: {4, 1, 2, 0, 6, 3, 5}.</p>
            <p>Ta có minh họa xây dựng max heap sau:</p>
            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "7a9105967e3eaf211a859b7c948ddf4dd8426cbc11565", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            <br />
        </div>
    </div>
    <div class=""container"" id=""I_6_5_3"">
        <h3>Duyệt cây heap</h3>
        <p>Do cây heap ở đây ta xét là cây heap nhị phân nên các cách duyệt cây đều giống như <a href=""I_6_4#I_6_4_3"">duyệt cây nhị phân</a>. Đặc biệt là duyệt cây theo cách tiền thứ tự đối với min heap/ max heap thì ra sẽ được cách sắp xếp mảng tăng/ giảm dần. Ta gọi đây là thuật toán sắp xếp vun đống (heap sort)</p>
    </div>
</div>
<div>
    <br />
    <br />
    <br />
    <br />
    <br />
    <br />
</div>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
