#pragma checksum "C:\Users\Akaiki\source\repos\KnowledgeManage\KnowledgeManage\Views\DS_and_A\III_4.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "da8bb1f272f813d520fbe40c52fd5d7cd49d200d"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_DS_and_A_III_4), @"mvc.1.0.view", @"/Views/DS_and_A/III_4.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Akaiki\source\repos\KnowledgeManage\KnowledgeManage\Views\_ViewImports.cshtml"
using KnowledgeManage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Akaiki\source\repos\KnowledgeManage\KnowledgeManage\Views\_ViewImports.cshtml"
using KnowledgeManage.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"da8bb1f272f813d520fbe40c52fd5d7cd49d200d", @"/Views/DS_and_A/III_4.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d8b91396dfbb5c43e5379ee682f129446bb1c6c7", @"/Views/_ViewImports.cshtml")]
    public class Views_DS_and_A_III_4 : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "C:\Users\Akaiki\source\repos\KnowledgeManage\KnowledgeManage\Views\DS_and_A\III_4.cshtml"
  
    ViewData["Title"] = "III_4";
    Layout = "~/Views/DS_and_A/Menu.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<div id=""accordion"">
    <h1>BÀI TẬP VỀ NGĂN XẾP (STACK)</h1>
    <p class=""alert-warning"">BẠN CÓ THỂ NHẤN VÀO ĐỂ XEM BÀI GIẢI</p>
    <h3>Bài tập cơ bản</h3>
    <div id=""accordion1"">
        <div class=""card"">
            <div class=""card-header"">
                <a class=""card-link"" data-toggle=""collapse"" href=""#Bai1"">
                    Bài 1. Viết các hàm trong ngăn xếp
                </a>
            </div>
            <div id=""Bai1"" class=""collapse"" data-parent=""#accordion"">

                <div class=""card"">
                    <div class=""card-header"">
                        <a class=""card-link"" data-toggle=""collapse"" href=""#cre-stack"">
                            Khởi tạo ngăn xếp bằng mảng
                        </a>
                    </div>
                    <div id=""cre-stack"" class=""collapse"" data-parent=""#accordion1"">
<pre style=""overflow: auto; font-family:Consolas"" class=""card-body"">
<code>
int MAXSIZE = 8;       
int stack[8];     
int top = -1;            ");
            WriteLiteral(@"
</code> 
</pre>

                    </div>
                </div>

                <div class=""card"">
                    <div class=""card-header"">
                        <a class=""card-link"" data-toggle=""collapse"" href=""#isempty"">
                            Hàm isEmpty() - Kiểm tra rỗng
                        </a>
                    </div>
                    <div id=""isempty"" class=""collapse"" data-parent=""#accordion1"">
<pre style=""overflow: auto; font-family:Consolas"" class=""card-body"">
<code>
int isempty() {
   if(top == -1)
      return 1;
   else
      return 0;
}
</code> 
</pre>

                    </div>
                </div>

                <div class=""card"">
                    <div class=""card-header"">
                        <a class=""card-link"" data-toggle=""collapse"" href=""#isFull"">
                            Hàm isFull() - Kiểm tra đẩy
                        </a>
                    </div>
                    <div id=""isFull"" class=""collapse"" data-pare");
            WriteLiteral(@"nt=""#accordion1"">
<pre style=""overflow: auto; font-family:Consolas"" class=""card-body"">
<code>
int isfull() {
   if(top == MAXSIZE)
      return 1;
   else
      return 0;
}        
</code> 
</pre>
                    </div>
                </div>

                <div class=""card"">
                    <div class=""card-header"">
                        <a class=""card-link"" data-toggle=""collapse"" href=""#peek"">
                            Hàm peek() - Lấy giá trị phần tử đầu ngăn xếp (Phần tử đưa vào cuối cùng)
                        </a>
                    </div>
                    <div id=""peek"" class=""collapse"" data-parent=""#accordion1"">
<pre style=""overflow: auto; font-family:Consolas"" class=""card-body"">
<code>
int peek() {
   return stack[top];
}         
</code> 
</pre>
                    </div>
                </div>

                <div class=""card"">
                    <div class=""card-header"">
                        <a class=""card-link"" data-toggle=""collapse"" href=");
            WriteLiteral(@"""#pop"">
                            Hàm pop() - Lấy phần tử ra khỏi ngăn xếp theo thứ tự LIFO
                        </a>
                    </div>
                    <div id=""pop"" class=""collapse"" data-parent=""#accordion1"">
<pre style=""overflow: auto; font-family:Consolas"" class=""card-body"">
<code>
int pop() {
   int data;
	
   if(!isempty()) {
      data = stack[top];
      top = top - 1;   
      return data;
   }else {
      printf(""Ngan xep (Stack) rong.\n"");
   }
}            
</code> 
</pre>
                    </div>
                </div>

                <div class=""card"">
                    <div class=""card-header"">
                        <a class=""card-link"" data-toggle=""collapse"" href=""#push"">
                            Hàm push() - Đưa phần tử vào ngăn xếp
                        </a>
                    </div>
                    <div id=""push"" class=""collapse"" data-parent=""#accordion1"">
<pre style=""overflow: auto; font-family:Consolas"" class=""card-body"">
<c");
            WriteLiteral(@"ode>
int push(int data) {

   if(!isfull()) {
      top = top + 1;   
      stack[top] = data;
   }else {
      printf(""Khong the chen du lieu, ngan xep (Stack) da day.\n"");
   }
}       
</code> 
</pre>
                    </div>
                </div>

            </div>
        </div>

        <div class=""card"">
            <div class=""card-header"">
                <a class=""card-link"" data-toggle=""collapse"" href=""#Bai2"">
                    Bài 2. Sử dụng các hàm ở <b>Bài 1</b>, lần lượt chèn các phần tử {2, 5, 6, 1, 3, 10, 6} vào ngăn xếp. In danh sách ngăn xếp ra màn hình. Kiểm tra rỗng trước và sau khi in.
                </a>
            </div>
            <div id=""Bai2"" class=""collapse"" data-parent=""#accordion"">
<pre style=""overflow: auto; font-family:Consolas"" class=""card-body"">
<code>
#include &lt; stdio.h &gt;

int MAXSIZE = 8;       
int stack[8];     
int top = -1;            

int isfull() {

   if(top == MAXSIZE)
      return 1;
   else
      return 0;
}");
            WriteLiteral(@"

int isempty() {

   if(top == -1)
      return 1;
   else
      return 0;
}

int pop() {
   int data;
	
   if(!isempty()) {
      data = stack[top];
      top = top - 1;   
      return data;
   }else {
      printf(""Khong the thu thap du lieu, ngan xep (Stack) la trong.\n"");
   }
}

int push(int data) {

   if(!isfull()) {
      top = top + 1;   
      stack[top] = data;
   }else {
      printf(""Khong the chen du lieu, ngan xep (Stack) da day.\n"");
   }
}

int main() {
   // chen cac phan tu vao ngan xep
   push(2);
   push(5);
   push(6);
   push(1);
   push(3);
   push(10);
   push(6);
   
   printf(""Ngan xep truoc khi in co rong khong?: %s\n"" , isempty()?""true"":""false"");
   
   // in cac phan tu trong ngan xep
   printf(""\nTop -"");
   while(!isempty()) {
      int data = pop();
      printf("" [ %d ] "",data);
   }
   printf(""- Bottom"");

   printf(""Ngan xep sau khi in co rong khong?: %s\n"" , isempty()?""true"":""false"");
   
   return 0;
}
</code> 
</p");
            WriteLiteral(@"re>
            </div>
        </div>

        <div class=""card"">
            <div class=""card-header"">
                <a class=""card-link"" data-toggle=""collapse"" href=""#Bai3"">
                    Bài 3. Sử dụng các hàm ở <b>Bài 1</b>, lần lượt chèn các phần tử {2, 5, 6, 1, 3, 10, 6} vào ngăn xếp. Lấy phần tử đầu ngăn xếp mà không xóa nó khỏi ngăn xếp (chỉ lấy giá trị).
                </a>
            </div>
            <div id=""Bai3"" class=""collapse"" data-parent=""#accordion"">
<pre style=""overflow: auto; font-family:Consolas"" class=""card-body"">
<code>
#include &lt; stdio.h &gt;

int MAXSIZE = 8;       
int stack[8];     
int top = -1;            

int isfull() {

   if(top == MAXSIZE)
      return 1;
   else
      return 0;
}

int isempty() {

   if(top == -1)
      return 1;
   else
      return 0;
}

int peek() {
   return stack[top];
}


int pop() {
   int data;
	
   if(!isempty()) {
      data = stack[top];
      top = top - 1;   
      return data;
   }els");
            WriteLiteral(@"e {
      printf(""Khong the thu thap du lieu, ngan xep (Stack) la trong.\n"");
   }
}

int push(int data) {

   if(!isfull()) {
      top = top + 1;   
      stack[top] = data;
   }else {
      printf(""Khong the chen du lieu, ngan xep (Stack) da day.\n"");
   }
}

int main() {
   // chen cac phan tu vao ngan xep
   push(2);
   push(5);
   push(6);
   push(1);
   push(3);
   push(10);
   push(6);
   
   printf(""Phan tu dinh ngan xep la: %d\n"", peek());
   
   // in cac phan tu trong ngan xep
   printf(""Cac phan tu trong ngan xep: "");
   printf(""\nTop -"");
   while(!isempty()) {
      int data = pop();
      printf("" [ %d ] "",data);
   }
   printf(""- Bottom"");
   return 0;
}
</code> 
</pre>
            </div>
        </div>
    </div>
</div>
<hr />");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
